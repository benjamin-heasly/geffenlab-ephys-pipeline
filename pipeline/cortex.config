// Choose config parameters from the environment or defaults.
params {
    // These four "coordinates" locate the data and results for one session.
    data_root = System.getenv('DATA_ROOT') ?: "/vol/cortex/cd4/geffenlab/data/"
    analysis_root = System.getenv('ANALYSIS_ROOT') ?: "/vol/cortex/cd4/geffenlab/analysis/"
    subject = System.getenv('SUBJECT_ID') ?: "AS20-minimal2"
    date = System.getenv('DATE') ?: "03112025"

    // Organize data in and analysis out by subject and date.
    data_path = "${params.data_root}/${params.subject}/${params.date}"
    analysis_path = "${params.analysis_root}/${params.subject}/${params.date}"

    // Use 10 CPU cores at a time -- not all of them!
    n_jobs = 10

    // Use up to 64GB of memory at a time -- not all of it!
    memory = '64 GB'

    // Choose --interactive or --no-interactive
    interactive = '--interactive'

    // For which probe should we run CatGt and TPrime?
    probe_id = 'imec0'

    // For which SpikeGLX recording should we run CatGT?
    spike_glx_gate = 0
    spike_glx_trigger = 0
    spike_glx_run = AS20_03112025_trainingSingle6Tone2024_Snk3.1

    // What GatGT args should we use?
    cat_gt_args = "-ni -ap -prb_fld -out_prb_fld -no_tshift -xa=0,0,0,1,3,500 -xia=0,0,1,3,3,0 -xd=0,0,8,3,0 -xid=0,0,-1,2,1.7 -xid=0,0,-1,3,5"

    // TODO: TPrime args
    // sync_period 1.0
    // probe_id imec0
    // --to-stream and --phy-from-stream based on short probe_id
    // tprime_streams
    // **/*nidq.xd_8_4_500.txt:**/*nidq.xa_0_500.txt \
    // **/*nidq.xd_8_4_500.txt:**/*nidq.xia_1_0.txt \
    // **/*nidq.xd_8_4_500.txt:**/*nidq.xd_8_3_0.txt \
    // **/*nidq.xd_8_4_500.txt:**/*nidq.xid_8_2_1p7.txt \
    // **/*nidq.xd_8_4_500.txt:**/*nidq.xid_8_3_5.txt \
}

// Run processes locally (not on AWS, SLURM, etc.)
process {
    executor = 'local'
    cpus = params.n_jobs
    memory = params.memory
}

// Run each process in a Docker container, as the current user (not as root).
docker {
    enabled = true

    // Run the container as the current user and group.
    // Expose X-related files to the container.
    // Expose the X DISPLAY variable to the container.
    // Let the container do networking like the host, so it can access display sockets via tcp if needed.
    runOptions = '-u $(id -u):$(id -g) -v /tmp/.X11-unix:/tmp/.X11-unix -v $HOME/.Xauthority:/var/.Xauthority -e DISPLAY=$DISPLAY -e XAUTHORITY=/var/.Xauthority --network=host'
}

dag {
    enabled = true
    file = params.analysis_path + '/nextflow/dag.html'
    overwrite = true
}

report {
    enabled = true
    file = params.analysis_path + '/nextflow/report.html'
    overwrite = true
}

timeline {
    enabled = true
    file = params.analysis_path + '/nextflow/timeline.html'
    overwrite = true
}

trace {
    enabled = true
    file = params.analysis_path + '/nextflow/trace.txt'
    overwrite = true
}
