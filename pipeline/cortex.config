params {
    // These are "coordinates" that locate processed data or analysis results for a session.
    raw_data_root = System.getenv('RAW_DATA_ROOT') ?: '/vol/cortex/cd4/geffenlab/raw_data'
    processed_data_root = System.getenv('PROCESSED_DATA_ROOT') ?: '/vol/cortex/cd4/geffenlab/processed_data'
    analysis_root = System.getenv('ANALYSIS_ROOT') ?: '/vol/cortex/cd4/geffenlab/analysis'
    experimenter = System.getenv('EXPERIMENTER') ?: 'BH'
    subject = System.getenv('SUBJECT_ID') ?: 'AS20-minimal3'
    date = System.getenv('DATE') ?: '03112025'

    // Organize data in and analysis out by subject and date.
    raw_data_path = "${params.raw_data_root}/${params.experimenter}/${params.subject}/${params.date}"
    processed_data_path = "${params.processed_data_root}/${params.experimenter}/${params.subject}/${params.date}"
    analysis_path = "${params.analysis_root}/${params.experimenter}/${params.subject}/${params.date}"

    // Use 10 CPU cores at a time -- not all of them!
    n_jobs = 10

    // Use up to 64GB of memory at a time -- not all of it!
    memory = '64 GB'

    // Choose whether to do interactive Phy curation or not:
    // interactive = '--interactive'
    // or
    // interactive = '--no-interactive'
    interactive = '--interactive'

    // Which probe should CatGT and TPrime look for?
    probe_id = 'imec0'

    // Which SpikeGLX recording should CatGT look for?
    catgt_run = 'AS20_03112025_trainingSingle6Tone2024_Snk3.1'
    catgt_gate = 0
    catgt_trigger = 0

    // Should CatGT look for Neuropixels plus NIDQ ('-ap -ni') or just Neuropixels ('-ap')?
    catgt_streams = '-ap -ni'

    // Should CatGT expect OneBox ('-obx=0') or not (empty '')?
    catgt_onebox = ''

    // Which event channels should CatGT try extract?
    catgt_events = '-xa=0,0,0,1,3,500 -xia=0,0,1,3,3,0 -xd=0,0,8,3,0 -xid=0,0,-1,2,1.7 -xid=0,0,-1,3,5'

    // Specify any other CatGT command arguments.
    // Since we're not using CatGT to filter the binary, we need -no_tshift.
    catgt_misc = '-no_tshift -prb_fld -out_prb_fld'

    // Our CatGT Python wrapper takes the probe_id, gate, and trigger as separate args.
    // All the other CatGT args go together here.
    catgt_args = "${params.catgt_run} ${params.catgt_streams} ${params.catgt_onebox} ${params.catgt_events} ${params.catgt_misc}"

    // What sync pulse period should TPrime expect?
    tprime_sync_period = 1.0

    // What stream of sync events should TPrime convert to?
    // This pattern must match a sync event .txt within the catgt/ output subdirectory.
    tprime_to_stream = "*/*/*${params.probe_id}.ap.*.txt"

    // Which other event streams should TPrime convert to the stream above?
    // Each pattern below must match an event .txt within the catgt/ output subdirectory.
    // The patterns on the left are for events that should be converted.
    // The patterns on the right are for sync events on the same stream.
    tprime_from_map = [
        "*/*nidq.xa_0_500.txt": "*/*nidq.xd_8_4_500.txt",
        "*/*nidq.xia_1_0.txt": "*/*nidq.xd_8_4_500.txt",
        "*/*nidq.xd_8_3_0.txt": "*/*nidq.xd_8_4_500.txt",
        "*/*nidq.xid_8_2_1p7.txt": "*/*nidq.xd_8_4_500.txt",
        "*/*nidq.xid_8_3_5.txt": "*/*nidq.xd_8_4_500.txt",
    ]

    // Format these "from streams" in the way our TPrime Python wrapper expects.
    tprime_from_streams = params.tprime_from_map.collect { other, sync -> "${sync}:${other}" }.join(' ')

    // Our TPrime Python wrapper can convert sorted spike times in the Phy folder as well.
    // Which text file contains the probe sync events produced by CatGT?
    // This pattern must match a sync event .txt within the catgt/ output subdirectory.
    tprime_phy_from_stream = "*/*/*${params.probe_id}.ap.*.txt"

    // Which converted event times should our synthesis step copy into the Phy folder as "events.csv?"
    // This pattern must match a sync event .txt file produced by TPrime, within the session analysis directory.
    synthesis_event_times_pattern = "exported/tprime/*/*nidq.xd_8_3_0.txt"

    // Which summary plot(s) should the pipeline run at the end, based on summary.pkl?
    // The available scripts live here: https://github.com/benjamin-heasly/geffenlab-synthesis/tree/main/code/plotting_scripts
    // Separate multiple script names with spaces.
    synthesis_plotting_scripts = "complex_condition demo"
}

// Run processes locally (not on AWS, SLURM, etc.)
process {
    executor = 'local'
    cpus = params.n_jobs
    memory = params.memory
}

// Run each process in a Docker container, as the current user (not as root).
docker {
    enabled = true

    // Run the container as the current user and group.
    // Expose X-related files to the container.
    // Expose the X DISPLAY variable to the container (if it exists).
    // Let the container do networking like the host, so it can access display sockets via tcp if needed.
    runOptions = '-u $(id -u):$(id -g) -v /tmp/.X11-unix:/tmp/.X11-unix -v $HOME/.Xauthority:/var/.Xauthority -e XAUTHORITY=/var/.Xauthority --network=host -e DISPLAY'
}

dag {
    enabled = true
    file = params.processed_data_path + '/nextflow/dag.html'
    overwrite = true
}

report {
    enabled = true
    file = params.processed_data_path + '/nextflow/report.html'
    overwrite = true
}

timeline {
    enabled = true
    file = params.processed_data_path + '/nextflow/timeline.html'
    overwrite = true
}

trace {
    enabled = true
    file = params.processed_data_path + '/nextflow/trace.txt'
    overwrite = true
}
